# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

# #############################################################################################################################
# CI/CD 
# #############################################################################################################################
# 빌드(Build) - 애플리케이션을 컴파일하는 단계
# 테스트(Test) - 코드를 테스트하는 단계. 
# 릴리스(Release) - 애플리케이션을 리포지토리에 제공하는 단계
# 배포(Deploy) - 코드를 프로덕션에 배포하는 단계
# 검증 및 컴플라이언스(Validation & compliance) 
# #############################################################################################################################

# name: Java CI with Gradle
name: Java CI/CD for container with Gradle

on:

# #############################################################################################################################
# 1. Setting to condition to start action
# #############################################################################################################################

  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# #############################################################################################################################

jobs:
  build:

# #############################################################################################################################
# 2. Setting VM Environment to make artifacts
# #############################################################################################################################

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: 'adopt'

# #############################################################################################################################

# #############################################################################################################################
# 3. Make artifacts
# #############################################################################################################################
    
    # 1) Build
    #   a) By gradle 
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew build
    
    - name: Check Artifact
      # ${{env.JAVA_HOME}}
      # run: ls -lRs 
      run: |
        echo "==============================================="
        pwd
        ls ./build/libs
        echo "==============================================="
        
    #   b) By maven or etc ...
    # 필요시 작성

    # -------------------------------------------------------------------------------------------------------------------------

    # 2) Make a docker image
    #- name: Docker build 
    #  run: |
    #    docker build -t spring-boot-cicd-ytest .
        
    #- name: Check docker image
    #  run: |
    #    echo "==============================================="
    #    docker images
    #    echo "==============================================="

# #############################################################################################################################

# #############################################################################################################################
# 4. Test : 테스트 단계는 각 사용자가 정책에 맞게 진행하면 됨. RestAPI 스트인 경우 [ Postman/Newman ] 조합을 사용할 수 있을 것 같음.
# #############################################################################################################################
    - name: Test before Release
      run: |
        echo "==============================================="
        echo "1. Start Application"
        nohup java -jar ./build/libs/app.jar >> nohup.out 2>&1 &
        
        echo "2. Test API"        
        #curl -X GET http://35.194.57.195:8888/hello
        #curl -X GET http://127.0.0.1:8888/hello
        
    - name: curl1
      uses: wei/curl@v1
      with:
        args: -X GET http://127.0.0.1:8888/hello
    
    - name: curl2
      uses: wei/curl@v1
      with:
        args: -X GET http://127.0.0.1:8888/bye
        
     #   echo "3. Show Result"
     #   echo "==============================================="
# #############################################################################################################################

# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

## #############################################################################################################################
## 5. Upload artifacts
## #############################################################################################################################
#    
#    # 1) Upload as a binary
#    #- name: Upload a build artifact as a bianry 
#    #  uses: actions/upload-artifact@v2
#    #  with:
#    #    # Artifact name
#    #    name: share_file_name
#    #    # A file, directory or wildcard pattern that describes what to upload
#    #    path: ./build/libs/*
#
#    # -------------------------------------------------------------------------------------------------------------------------
#    
#    # 2) Upload as a docker image
#    # 참고 : docker image를 직접 파일로 저장해서 배포하는 경우에는 Docker Image를 파일로 저장하고, [ 1) Upload as a binary ]과 같이 업로드 해야 함
#    # 참고 : 업로드한 docker image파일은 [ depoly ] 부분에서 다운로드 해야 함  
#    - name: Upload a docker image
#      run: |
#        docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
#        #docker tag spring-boot-cicd-ytest ${{ secrets.DOCKERHUB_USERNAME }}/spring-boot-cicd-ytest:${GITHUB_SHA::7}
#        #docker push ${{ secrets.DOCKERHUB_USERNAME }}/spring-boot-cicd-ytest:${GITHUB_SHA::7}
#        docker tag spring-boot-cicd-ytest ${{ secrets.DOCKERHUB_USERNAME }}/spring-boot-cicd-ytest
#        docker push ${{ secrets.DOCKERHUB_USERNAME }}/spring-boot-cicd-ytest
#        
#        echo "==============================================="
#        docker images
#        echo "==============================================="
#       
## #############################################################################################################################
#
#  depoly:
#
## #############################################################################################################################
## 6. Setting VM Environment to depoly artifacts
## #############################################################################################################################
#
#    runs-on: ubuntu-latest
#    # 'needs:build' is Setting dependency to start deploy (build 과정이 끝난 후 하단의 코드 실행함을 의미)  
#    needs: build
#
## #############################################################################################################################
#
#    steps:
#
## #############################################################################################################################
## 7. Download artifacts
## #############################################################################################################################
#    
#    # 1) Download as a binary
#    #- name: Download artifacts from build VM
#    #  uses: actions/download-artifact@v2
#    #  with:
#    #    name: share_file_name
#    
#    #- name: Check Download Artifact    
#    #  run: |
#    #    pwd
#    #    ls -lRs
#    
#    # -------------------------------------------------------------------------------------------------------------------------
#    
#    # 2) Download as a docker image
#    # 필요시 작성
#    # 참고 : docker image를 dockerhub에 push한 경우로 해당 이미지 파일 필요 없음
#    # 참고 : docker image를 직접 파일로 저장해서 배포하는 경우에 필요할 것임
#              
## #############################################################################################################################
#
## #############################################################################################################################
## 8. Deploy artifacts
## #############################################################################################################################
#    
#    # 1) As a binary
#    #- name: Deploy artifacts with SFTP
#    #  id: upload
#    #  uses: Creepios/sftp-action@v1.0.3
#    #  with:
#    #    host: ${{ secrets.REMOTE_IP }}
#    #    port: 22
#    #    username: ${{ secrets.REMOTE_SSH_ID }}
#    #    password: ${{ secrets.REMOTE_SSH_PASSWORD}}
#    #    localPath: './app.jar'
#    #    remotePath: './artifactory/'
#    
#    # -------------------------------------------------------------------------------------------------------------------------
#    
#    # 2) As a docker image
#    # 필요시 추가
#    # 참고 : Docker Image를 파일로 저장해 직접 배포하지 않기 때문에, Build 한 VM(build)에서 dockerhub등으로 직접 배포하고,
#    # 참고 : [ 8. Execution a service ] 부분에서 SSH를 통해 Docker pull 및 Container을 실행 해야 함
#    # 참고 : Docker Image를 파일로 저장해 직접 배포하는 경우 [ 1) As a binary ] 처럼 SFTP를 사용해 해당하는 원격지의 서버에 배포(put) 함
#              
## #############################################################################################################################
#
#
## #############################################################################################################################
## 9. Execution a service
## #############################################################################################################################
#
#    - name: Execution a service with SSH
#      uses: appleboy/ssh-action@master 
#      with:
#        host: ${{ secrets.REMOTE_IP }}
#        username: ${{ secrets.REMOTE_SSH_ID }}
#        password: ${{ secrets.REMOTE_SSH_PASSWORD}}
#        port: 22
#        #host: ${{ secrets.REMOTE_IP }}
#        #username: ${{ secrets.REMOTE_SSH_ID }}
#        #key: ${{ secrets.REMOTE_SSH_KEY }} or password: ${{ secrets.REMOTE_SSH_PASSWORD}}
#        #port: ${{ secrets.REMOTE_SSH_PORT }}
#        script: |
#          echo "As a bianary #############################################################"
#
#          #cd ~/artifactory
#          #pwd
#          #./start_app.sh
#          #echo "==============================================="
#          #ls -lRs
#          #echo "==============================================="
#          
#          echo "As a container ###########################################################"
#
#          echo "==============================================="
#          docker images
#          echo "==============================================="
#        
#          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/spring-boot-cicd-ytest # or sudo docker pull [계정명]/spring-cicd:[최신버젼]
#        
#          echo "==============================================="
#          docker images
#          echo "==============================================="
#          
#          docker stop spring-boot-cicd-ytest
#          docker run -d --rm --name spring-boot-cicd-ytest -p 8888:8888 ${{ secrets.DOCKERHUB_USERNAME }}/spring-boot-cicd-ytest
#          
#          echo "Finish SSH ###############################################################"
#          
## #############################################################################################################################



