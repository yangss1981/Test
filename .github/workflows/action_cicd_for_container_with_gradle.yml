# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

# #############################################################################################################################
# CI/CD 
# #############################################################################################################################
# 빌드(Build) - 애플리케이션을 컴파일하는 단계
# 테스트(Test) - 코드를 테스트하는 단계. 
# 릴리스(Release) - 애플리케이션을 리포지토리에 제공하는 단계
# 배포(Deploy) - 코드를 프로덕션에 배포하는 단계
# 검증 및 컴플라이언스(Validation & compliance) 
# #############################################################################################################################

# name: Java CI with Gradle
name: Java CI/CD for container with Gradle

on:

# #############################################################################################################################
# 1. Setting to condition to start action
# #############################################################################################################################

  workflow_dispatch:
  # master 브랜치에 push 나 pull request 이벤트가 발생하였을때 해당 workflow 를 trigger
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# #############################################################################################################################

# workflow의 실행은 하나 이상의 job으로 구성 됨
jobs:
  build:

# #############################################################################################################################
# 2. Setting VM Environment to make artifacts
# #############################################################################################################################

    # job이 실행될 환경
    runs-on: ubuntu-latest

    steps:
    # repository checkout
    - uses: actions/checkout@v2
   
    # 1) With JDK 11 
    #- name: Set up JDK 11
    #  uses: actions/setup-java@v2
    #  with:
    #    java-version: 11
    #    distribution: 'adopt'
    
    # 2) With JDK 1.8
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

# #############################################################################################################################

# #############################################################################################################################
# 3. Make artifacts
# #############################################################################################################################
    
    # 1) Build
    #   a) By gradle 
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew build
      shell: bash
    
    - name: Check Artifact
      # ${{env.JAVA_HOME}}
      # run: ls -lRs 
      run: |
        echo "==============================================="
        pwd
        ls ./build/libs
        echo "==============================================="
        
    #   b) By maven or etc ...
    # 필요시 작성

    # -------------------------------------------------------------------------------------------------------------------------

    # 2) Make a docker image
    - name: Docker build 
      run: |
        docker build -t spring-boot-cicd-ytest .
        
    - name: Check docker image
      run: |
        echo "==============================================="
        docker images
        echo "==============================================="

# #############################################################################################################################

# #############################################################################################################################
# 4. Test : 테스트 단계는 각 사용자가 정책에 맞게 진행하면 됨. RestAPI 스트인 경우 [ Postman/Newman ] 조합을 사용할 수 있을 것 같음.
# #############################################################################################################################
    #- name: Test before Release
    #  run: |
    #    echo "==============================================="
    #    echo "1. Start Application"
    #    nohup java -jar -Djava.net.preferIPv4Stack=true ./build/libs/app.jar >> nohup.out 2>&1 &
    #    #nohup java -jar ./build/libs/app.jar >> nohup.out 2>&1 &
      
    #    echo "2. Test API"        
    #    #curl -X GET http://35.194.57.195:7777/hello
    #    #curl -X GET http://127.0.0.1:7777/hello
    #    ps -ef | grep app.jar
    #    npm install --save netstats
    #    #az vm open-port --port 7777 --resource-group myResourceGroupAutomate --name myAutomatedVM # azure vm 로그인 필요함
    #  shell: bash
    
    #- name: Sleep for 30 seconds
    #  uses: jakejarvis/wait-action@master
    #  with:
    #    time: '30s'
        
    #- name: Check Networks
    #  run: |
        
    #    echo "===============================================111"
    #    netstat -ntlp
    #    echo "===============================================222"
        
    #- name: RestAPI Test
    #  uses: wei/curl@v1
    #  with:
    #    args: -X GET http://127.0.0.1:7777/hello
    
    - name: RestAPI Test
      uses: wei/curl@v1
      with:
        args: -X GET ${{ secrets.REMOTE_IP }}:7777/hello
    



