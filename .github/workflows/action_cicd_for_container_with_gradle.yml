# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

# name: Java CI with Gradle
name: Java CI/CD for container with Gradle

on:

# #############################################################################################################################
# 1. Setting to condition to start action
# #############################################################################################################################

  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# #############################################################################################################################

jobs:
  build:

# #############################################################################################################################
# 2. Setting VM Environment to make artifacts
# #############################################################################################################################

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: 'adopt'

# #############################################################################################################################

# #############################################################################################################################
# 3. Make artifacts
# #############################################################################################################################
    
    # 1) Build
    #   a) By gradle 
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew build
    
    - name: Check Artifact
      # ${{env.JAVA_HOME}}
      # run: ls -lRs 
      run: |
        pwd
        ls ./build/libs
        
    #   b) By maven or etc ...
    # 필요시 작성

    # -------------------------------------------------------------------------------------------------------------------------

    # 2) Make a docker image
    - name: Docker build 
      run: |
        docker build -t spring-boot-cicd-ytest .
        
    - name: Check docker image
      run: |
        echo "==============================================="
        docker images
        echo "==============================================="
    
# #############################################################################################################################

# #############################################################################################################################
# 4. Upload artifacts
# #############################################################################################################################
    
    # 1) Upload as a binary
    #- name: Upload a build artifact as a bianry 
    #  uses: actions/upload-artifact@v2
    #  with:
    #    # Artifact name
    #    name: share_file_name
    #    # A file, directory or wildcard pattern that describes what to upload
    #    path: ./build/libs/*

    # -------------------------------------------------------------------------------------------------------------------------
    
    # 2) Upload as a docker image
    - name: Upload a docker image
      run: |
        docker images
        docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
        echo "################################################################################################################################################ 1"
        
        docker tag spring-boot-cicd-ytest ${{ secrets.DOCKERHUB_USERNAME }}/spring-boot-cicd-test-ytest:${GITHUB_SHA::7}
        
        docker images
        echo "################################################################################################################################################ 2"
        echo ${GITHUB_SHA::7}
        echo "################################################################################################################################################ 3" 
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/spring-boot-cicd-ytest:${GITHUB_SHA::7}
       
# #############################################################################################################################

  depoly:

# #############################################################################################################################
# 5. Setting VM Environment to depoly artifacts
# #############################################################################################################################

    runs-on: ubuntu-latest
    # 'needs:build' is Setting dependency to start deploy (build 과정이 끝난 후 하단의 코드 실행함을 의미)  
    needs: build

# #############################################################################################################################

    steps:

# #############################################################################################################################
# 6. Download artifacts
# #############################################################################################################################
    
    # 1) Download as a binary
    #- name: Download artifacts from build VM
    #  uses: actions/download-artifact@v2
    #  with:
    #    name: share_file_name
    
    #- name: Check Download Artifact    
    #  run: |
    #    pwd
    #    ls -lRs
    
    # -------------------------------------------------------------------------------------------------------------------------
    
    # 2) Download as a docker image
    # 필요시 작성
    # docker image를 dockerhub에 push한 경우로 해당 이미지 파일 필요 없음
              
# #############################################################################################################################

# #############################################################################################################################
# 7. Deploy artifacts
# #############################################################################################################################
    
    # 1) As a binary
    #- name: Deploy artifacts with SFTP
    #  id: upload
    #  uses: Creepios/sftp-action@v1.0.3
    #  with:
    #    host: ${{ secrets.REMOTE_IP }}
    #    port: 22
    #    username: ${{ secrets.REMOTE_SSH_ID }}
    #    password: ${{ secrets.REMOTE_SSH_PASSWORD}}
    #    localPath: './app.jar'
    #    remotePath: './artifactory/'
    
    # -------------------------------------------------------------------------------------------------------------------------
    
    # 2) As a container
    # 필요시 추가
    # - name: Deploy artifacts with docker
        
# #############################################################################################################################


# #############################################################################################################################
# 8. Execution a service
# #############################################################################################################################

    - name: Execution a service with SSH
      uses: appleboy/ssh-action@master 
      with:
        host: ${{ secrets.REMOTE_IP }}
        username: ${{ secrets.REMOTE_SSH_ID }}
        password: ${{ secrets.REMOTE_SSH_PASSWORD}}
        port: 22
        #host: ${{ secrets.REMOTE_IP }}
        #username: ${{ secrets.REMOTE_SSH_ID }}
        #key: ${{ secrets.REMOTE_SSH_KEY }} or password: ${{ secrets.REMOTE_SSH_PASSWORD}}
        #port: ${{ secrets.REMOTE_SSH_PORT }}
        script: |
          echo "As a bianary #############################################################"
          #cd ~/artifactory
          #pwd
          #./start_app.sh
          echo "As a container ###########################################################"
          echo "Results #################################################################"
          ls -lRs
          echo "Finish SSH ##############################################################"
          
# #############################################################################################################################

    
    
    
    
